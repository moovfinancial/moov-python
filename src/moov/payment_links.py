"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from enum import Enum
from moov import models, utils
from moov._hooks import HookContext
from moov.types import OptionalNullable, UNSET
from typing import Any, List, Mapping, Optional, Union


class GetPaymentLinkQRCodeAcceptEnum(str, Enum):
    APPLICATION_JSON = "application/json"
    IMAGE_PNG = "image/png"


class PaymentLinks(BaseSDK):
    def create_payment_link(
        self,
        *,
        security: Union[
            models.CreatePaymentLinkSecurity, models.CreatePaymentLinkSecurityTypedDict
        ],
        account_id: str,
        partner_account_id: str,
        merchant_payment_method_id: str,
        amount: Union[models.Amount, models.AmountTypedDict],
        display: Union[
            models.PaymentLinkDisplayOptions, models.PaymentLinkDisplayOptionsTypedDict
        ],
        x_moov_version: Optional[models.Versions] = None,
        max_uses: Optional[int] = None,
        expires_on: Optional[datetime] = None,
        customer: Optional[
            Union[
                models.PaymentLinkCustomerOptions,
                models.PaymentLinkCustomerOptionsTypedDict,
            ]
        ] = None,
        payment: Optional[
            Union[
                models.PaymentLinkPaymentDetails,
                models.PaymentLinkPaymentDetailsTypedDict,
            ]
        ] = None,
        payout: Optional[
            Union[
                models.PaymentLinkPayoutDetails,
                models.PaymentLinkPayoutDetailsTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PaymentLink:
        r"""Create a payment link that allows an end user to make a payment on Moov's hosted payment link page.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param partner_account_id: The partner's Moov account ID.
        :param merchant_payment_method_id: The merchant's preferred payment method ID. Must be a wallet payment method.
        :param amount:
        :param display: Customizable display options for a payment link.
        :param x_moov_version: Specify an API version.
        :param max_uses: An optional limit on the number of times this payment link can be used.   **For payouts, `maxUses` is always 1.**
        :param expires_on: An optional expiration date for this payment link.
        :param customer:
        :param payment: Options for payment links used to collect payment.
        :param payout:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreatePaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            create_payment_link=models.CreatePaymentLink(
                partner_account_id=partner_account_id,
                merchant_payment_method_id=merchant_payment_method_id,
                amount=utils.get_pydantic_model(amount, models.Amount),
                max_uses=max_uses,
                expires_on=expires_on,
                display=utils.get_pydantic_model(
                    display, models.PaymentLinkDisplayOptions
                ),
                customer=utils.get_pydantic_model(
                    customer, Optional[models.PaymentLinkCustomerOptions]
                ),
                payment=utils.get_pydantic_model(
                    payment, Optional[models.PaymentLinkPaymentDetails]
                ),
                payout=utils.get_pydantic_model(
                    payout, Optional[models.PaymentLinkPayoutDetails]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/accounts/{accountID}/payment-links",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.CreatePaymentLinkSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_payment_link,
                False,
                False,
                "json",
                models.CreatePaymentLink,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="createPaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "422",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PaymentLink)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(
                http_res.text, models.CreatePaymentLinkErrorData
            )
            raise models.CreatePaymentLinkError(data=data)
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_payment_link_async(
        self,
        *,
        security: Union[
            models.CreatePaymentLinkSecurity, models.CreatePaymentLinkSecurityTypedDict
        ],
        account_id: str,
        partner_account_id: str,
        merchant_payment_method_id: str,
        amount: Union[models.Amount, models.AmountTypedDict],
        display: Union[
            models.PaymentLinkDisplayOptions, models.PaymentLinkDisplayOptionsTypedDict
        ],
        x_moov_version: Optional[models.Versions] = None,
        max_uses: Optional[int] = None,
        expires_on: Optional[datetime] = None,
        customer: Optional[
            Union[
                models.PaymentLinkCustomerOptions,
                models.PaymentLinkCustomerOptionsTypedDict,
            ]
        ] = None,
        payment: Optional[
            Union[
                models.PaymentLinkPaymentDetails,
                models.PaymentLinkPaymentDetailsTypedDict,
            ]
        ] = None,
        payout: Optional[
            Union[
                models.PaymentLinkPayoutDetails,
                models.PaymentLinkPayoutDetailsTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PaymentLink:
        r"""Create a payment link that allows an end user to make a payment on Moov's hosted payment link page.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param partner_account_id: The partner's Moov account ID.
        :param merchant_payment_method_id: The merchant's preferred payment method ID. Must be a wallet payment method.
        :param amount:
        :param display: Customizable display options for a payment link.
        :param x_moov_version: Specify an API version.
        :param max_uses: An optional limit on the number of times this payment link can be used.   **For payouts, `maxUses` is always 1.**
        :param expires_on: An optional expiration date for this payment link.
        :param customer:
        :param payment: Options for payment links used to collect payment.
        :param payout:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreatePaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            create_payment_link=models.CreatePaymentLink(
                partner_account_id=partner_account_id,
                merchant_payment_method_id=merchant_payment_method_id,
                amount=utils.get_pydantic_model(amount, models.Amount),
                max_uses=max_uses,
                expires_on=expires_on,
                display=utils.get_pydantic_model(
                    display, models.PaymentLinkDisplayOptions
                ),
                customer=utils.get_pydantic_model(
                    customer, Optional[models.PaymentLinkCustomerOptions]
                ),
                payment=utils.get_pydantic_model(
                    payment, Optional[models.PaymentLinkPaymentDetails]
                ),
                payout=utils.get_pydantic_model(
                    payout, Optional[models.PaymentLinkPayoutDetails]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/accounts/{accountID}/payment-links",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.CreatePaymentLinkSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_payment_link,
                False,
                False,
                "json",
                models.CreatePaymentLink,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="createPaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "422",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PaymentLink)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(
                http_res.text, models.CreatePaymentLinkErrorData
            )
            raise models.CreatePaymentLinkError(data=data)
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_payment_links(
        self,
        *,
        security: Union[
            models.ListPaymentLinksSecurity, models.ListPaymentLinksSecurityTypedDict
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.PaymentLink]:
        r"""List all the payment links created under a Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.read` scope.

        :param security:
        :param account_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListPaymentLinksRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/payment-links",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListPaymentLinksSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="listPaymentLinks",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, List[models.PaymentLink])
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_payment_links_async(
        self,
        *,
        security: Union[
            models.ListPaymentLinksSecurity, models.ListPaymentLinksSecurityTypedDict
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.PaymentLink]:
        r"""List all the payment links created under a Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.read` scope.

        :param security:
        :param account_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListPaymentLinksRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/payment-links",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListPaymentLinksSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="listPaymentLinks",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, List[models.PaymentLink])
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_payment_link(
        self,
        *,
        security: Union[
            models.GetPaymentLinkSecurity, models.GetPaymentLinkSecurityTypedDict
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PaymentLink:
        r"""Retrieve a payment link by code.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.read` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetPaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetPaymentLinkSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="getPaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PaymentLink)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_payment_link_async(
        self,
        *,
        security: Union[
            models.GetPaymentLinkSecurity, models.GetPaymentLinkSecurityTypedDict
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PaymentLink:
        r"""Retrieve a payment link by code.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.read` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetPaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetPaymentLinkSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="getPaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PaymentLink)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def update_payment_link(
        self,
        *,
        security: Union[
            models.UpdatePaymentLinkSecurity, models.UpdatePaymentLinkSecurityTypedDict
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        amount: Optional[
            Union[models.AmountUpdate, models.AmountUpdateTypedDict]
        ] = None,
        expires_on: OptionalNullable[datetime] = UNSET,
        display: Optional[
            Union[
                models.PaymentLinkDisplayOptionsUpdate,
                models.PaymentLinkDisplayOptionsUpdateTypedDict,
            ]
        ] = None,
        customer: Optional[
            Union[
                models.PaymentLinkCustomerOptions,
                models.PaymentLinkCustomerOptionsTypedDict,
            ]
        ] = None,
        payment: Optional[
            Union[
                models.PaymentLinkPaymentDetailsUpdate,
                models.PaymentLinkPaymentDetailsUpdateTypedDict,
            ]
        ] = None,
        payout: Optional[
            Union[
                models.PaymentLinkPayoutDetailsUpdate,
                models.PaymentLinkPayoutDetailsUpdateTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PaymentLink:
        r"""Update a payment link.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param amount:
        :param expires_on:
        :param display: Customizable display options for a payment link.
        :param customer:
        :param payment: Options for payment links used to collect payment.
        :param payout:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdatePaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
            update_payment_link=models.UpdatePaymentLink(
                amount=utils.get_pydantic_model(amount, Optional[models.AmountUpdate]),
                expires_on=expires_on,
                display=utils.get_pydantic_model(
                    display, Optional[models.PaymentLinkDisplayOptionsUpdate]
                ),
                customer=utils.get_pydantic_model(
                    customer, Optional[models.PaymentLinkCustomerOptions]
                ),
                payment=utils.get_pydantic_model(
                    payment, Optional[models.PaymentLinkPaymentDetailsUpdate]
                ),
                payout=utils.get_pydantic_model(
                    payout, Optional[models.PaymentLinkPayoutDetailsUpdate]
                ),
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UpdatePaymentLinkSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_payment_link,
                False,
                False,
                "json",
                models.UpdatePaymentLink,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="updatePaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "422",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PaymentLink)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(
                http_res.text, models.UpdatePaymentLinkErrorData
            )
            raise models.UpdatePaymentLinkError(data=data)
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def update_payment_link_async(
        self,
        *,
        security: Union[
            models.UpdatePaymentLinkSecurity, models.UpdatePaymentLinkSecurityTypedDict
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        amount: Optional[
            Union[models.AmountUpdate, models.AmountUpdateTypedDict]
        ] = None,
        expires_on: OptionalNullable[datetime] = UNSET,
        display: Optional[
            Union[
                models.PaymentLinkDisplayOptionsUpdate,
                models.PaymentLinkDisplayOptionsUpdateTypedDict,
            ]
        ] = None,
        customer: Optional[
            Union[
                models.PaymentLinkCustomerOptions,
                models.PaymentLinkCustomerOptionsTypedDict,
            ]
        ] = None,
        payment: Optional[
            Union[
                models.PaymentLinkPaymentDetailsUpdate,
                models.PaymentLinkPaymentDetailsUpdateTypedDict,
            ]
        ] = None,
        payout: Optional[
            Union[
                models.PaymentLinkPayoutDetailsUpdate,
                models.PaymentLinkPayoutDetailsUpdateTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PaymentLink:
        r"""Update a payment link.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param amount:
        :param expires_on:
        :param display: Customizable display options for a payment link.
        :param customer:
        :param payment: Options for payment links used to collect payment.
        :param payout:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdatePaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
            update_payment_link=models.UpdatePaymentLink(
                amount=utils.get_pydantic_model(amount, Optional[models.AmountUpdate]),
                expires_on=expires_on,
                display=utils.get_pydantic_model(
                    display, Optional[models.PaymentLinkDisplayOptionsUpdate]
                ),
                customer=utils.get_pydantic_model(
                    customer, Optional[models.PaymentLinkCustomerOptions]
                ),
                payment=utils.get_pydantic_model(
                    payment, Optional[models.PaymentLinkPaymentDetailsUpdate]
                ),
                payout=utils.get_pydantic_model(
                    payout, Optional[models.PaymentLinkPayoutDetailsUpdate]
                ),
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UpdatePaymentLinkSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_payment_link,
                False,
                False,
                "json",
                models.UpdatePaymentLink,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="updatePaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "422",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PaymentLink)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(
                http_res.text, models.UpdatePaymentLinkErrorData
            )
            raise models.UpdatePaymentLinkError(data=data)
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def disable_payment_link(
        self,
        *,
        security: Union[
            models.DisablePaymentLinkSecurity,
            models.DisablePaymentLinkSecurityTypedDict,
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Disable a payment link.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DisablePaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
        )

        req = self._build_request(
            method="DELETE",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.DisablePaymentLinkSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="disablePaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def disable_payment_link_async(
        self,
        *,
        security: Union[
            models.DisablePaymentLinkSecurity,
            models.DisablePaymentLinkSecurityTypedDict,
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Disable a payment link.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DisablePaymentLinkRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.DisablePaymentLinkSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="disablePaymentLink",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_payment_link_qr_code(
        self,
        *,
        security: Union[
            models.GetPaymentLinkQRCodeSecurity,
            models.GetPaymentLinkQRCodeSecurityTypedDict,
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetPaymentLinkQRCodeAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetPaymentLinkQRCodeResponse:
        r"""Retrieve the payment link encoded in a QR code.

        Use the `Accept` header to specify the format of the response. Supported formats are `application/json` and `image/png`.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetPaymentLinkQRCodeRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}/qrcode",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/json;q=1, image/png;q=0",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetPaymentLinkQRCodeSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="getPaymentLinkQRCode",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            http_response_text = utils.stream_to_text(http_res)
            return utils.unmarshal_json(http_response_text, models.QRCode)
        if utils.match_response(http_res, "200", "image/png"):
            return http_res
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_payment_link_qr_code_async(
        self,
        *,
        security: Union[
            models.GetPaymentLinkQRCodeSecurity,
            models.GetPaymentLinkQRCodeSecurityTypedDict,
        ],
        account_id: str,
        payment_link_code: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetPaymentLinkQRCodeAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetPaymentLinkQRCodeResponse:
        r"""Retrieve the payment link encoded in a QR code.

        Use the `Accept` header to specify the format of the response. Supported formats are `application/json` and `image/png`.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need
        to specify the `/accounts/{accountID}/transfers.write` scope.

        :param security:
        :param account_id:
        :param payment_link_code:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetPaymentLinkQRCodeRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            payment_link_code=payment_link_code,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/payment-links/{paymentLinkCode}/qrcode",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/json;q=1, image/png;q=0",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetPaymentLinkQRCodeSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="getPaymentLinkQRCode",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            http_response_text = await utils.stream_to_text_async(http_res)
            return utils.unmarshal_json(http_response_text, models.QRCode)
        if utils.match_response(http_res, "200", "image/png"):
            return http_res
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
