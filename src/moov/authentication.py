"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from moov import models, utils
from moov._hooks import HookContext
from moov.types import OptionalNullable, UNSET
from typing import Any, Mapping, Optional


class Authentication(BaseSDK):
    def revoke_auth_token(
        self,
        *,
        token: str,
        x_moov_version: Optional[models.Versions] = None,
        token_type_hint: Optional[models.TokenTypeHint] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Revoke an auth token.

        Allows clients to notify the authorization server that a previously obtained refresh or access token is no longer needed.

        :param token: The access or refresh token to revoke.
        :param x_moov_version: Specify an API version.
        :param token_type_hint: The type of token being revoked.
        :param client_id: Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
        :param client_secret: Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.RevokeAuthTokenRequest(
            x_moov_version=x_moov_version,
            revoke_token_request=models.RevokeTokenRequest(
                token=token,
                token_type_hint=token_type_hint,
                client_id=client_id,
                client_secret=client_secret,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/oauth2/revoke",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.revoke_token_request,
                False,
                False,
                "json",
                models.RevokeTokenRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="revokeAuthToken",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "422", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(
                http_res.text, models.RevokeTokenRequestErrorData
            )
            raise models.RevokeTokenRequestError(data=data)
        if utils.match_response(http_res, ["429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def revoke_auth_token_async(
        self,
        *,
        token: str,
        x_moov_version: Optional[models.Versions] = None,
        token_type_hint: Optional[models.TokenTypeHint] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Revoke an auth token.

        Allows clients to notify the authorization server that a previously obtained refresh or access token is no longer needed.

        :param token: The access or refresh token to revoke.
        :param x_moov_version: Specify an API version.
        :param token_type_hint: The type of token being revoked.
        :param client_id: Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
        :param client_secret: Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.RevokeAuthTokenRequest(
            x_moov_version=x_moov_version,
            revoke_token_request=models.RevokeTokenRequest(
                token=token,
                token_type_hint=token_type_hint,
                client_id=client_id,
                client_secret=client_secret,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/oauth2/revoke",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.revoke_token_request,
                False,
                False,
                "json",
                models.RevokeTokenRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="revokeAuthToken",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "422", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(
                http_res.text, models.RevokeTokenRequestErrorData
            )
            raise models.RevokeTokenRequestError(data=data)
        if utils.match_response(http_res, ["429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def create_auth_token(
        self,
        *,
        grant_type: models.GrantType,
        x_moov_version: Optional[models.Versions] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        scope: Optional[str] = None,
        refresh_token: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AuthToken:
        r"""Create or refresh an access token.

        :param grant_type: The type of grant being requested.    - `client_credentials`: A grant type used by clients to obtain an access token   - `refresh_token`: A grant type used by clients to obtain a new access token using a refresh token
        :param x_moov_version: Specify an API version.
        :param client_id: Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
        :param client_secret: Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
        :param scope: A space delimited list of scopes. Required when `grant_type` is `client_credentials`.
        :param refresh_token: The refresh_token returned alongside the access token being refreshed. Required when `grant_type` is `refresh_token`.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateAuthTokenRequest(
            x_moov_version=x_moov_version,
            auth_token_request=models.AuthTokenRequest(
                grant_type=grant_type,
                client_id=client_id,
                client_secret=client_secret,
                scope=scope,
                refresh_token=refresh_token,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/oauth2/token",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.auth_token_request,
                False,
                False,
                "json",
                models.AuthTokenRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="createAuthToken",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "422", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AuthToken)
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.AuthTokenRequestErrorData)
            raise models.AuthTokenRequestError(data=data)
        if utils.match_response(http_res, ["429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_auth_token_async(
        self,
        *,
        grant_type: models.GrantType,
        x_moov_version: Optional[models.Versions] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        scope: Optional[str] = None,
        refresh_token: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AuthToken:
        r"""Create or refresh an access token.

        :param grant_type: The type of grant being requested.    - `client_credentials`: A grant type used by clients to obtain an access token   - `refresh_token`: A grant type used by clients to obtain a new access token using a refresh token
        :param x_moov_version: Specify an API version.
        :param client_id: Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
        :param client_secret: Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
        :param scope: A space delimited list of scopes. Required when `grant_type` is `client_credentials`.
        :param refresh_token: The refresh_token returned alongside the access token being refreshed. Required when `grant_type` is `refresh_token`.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateAuthTokenRequest(
            x_moov_version=x_moov_version,
            auth_token_request=models.AuthTokenRequest(
                grant_type=grant_type,
                client_id=client_id,
                client_secret=client_secret,
                scope=scope,
                refresh_token=refresh_token,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/oauth2/token",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.auth_token_request,
                False,
                False,
                "json",
                models.AuthTokenRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="createAuthToken",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "422", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AuthToken)
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, "422", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.AuthTokenRequestErrorData)
            raise models.AuthTokenRequestError(data=data)
        if utils.match_response(http_res, ["429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
