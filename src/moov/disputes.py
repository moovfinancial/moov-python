"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from enum import Enum
from moov import models, utils
from moov._hooks import HookContext
from moov.types import OptionalNullable, UNSET
from typing import Any, List, Mapping, Optional, Union


class GetDisputeEvidenceDataAcceptEnum(str, Enum):
    APPLICATION_PDF = "application/pdf"
    IMAGE_JPEG = "image/jpeg"
    IMAGE_TIFF = "image/tiff"


class Disputes(BaseSDK):
    def list_disputes(
        self,
        *,
        security: Union[
            models.ListDisputesSecurity, models.ListDisputesSecurityTypedDict
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        start_date_time: Optional[datetime] = None,
        end_date_time: Optional[datetime] = None,
        respond_start_date_time: Optional[datetime] = None,
        respond_end_date_time: Optional[datetime] = None,
        status: Optional[models.DisputeStatus] = None,
        merchant_account_id: Optional[str] = None,
        cardholder_account_id: Optional[str] = None,
        dispute_i_ds: Optional[List[str]] = None,
        transfer_i_ds: Optional[List[str]] = None,
        order_by: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.Dispute]:
        r"""Returns the list of disputes.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param start_date_time: Optional date-time parameter to filter all disputes created on and after the provided date and time.
        :param end_date_time: Optional date-time parameter to filter all disputes created on and before the provided date and time.
        :param respond_start_date_time: Optional date-time which exclusively filters all disputes with respond by before this date-time.
        :param respond_end_date_time: Optional date-time which exclusively filters all disputes with respond by before this date-time.
        :param status: Optional dispute status by which to filter the disputes.
        :param merchant_account_id: Optional parameter to filter by merchant account ID.
        :param cardholder_account_id: Optional parameter to filter by cardholder account ID.
        :param dispute_i_ds: Optional parameter to filter by a comma separated list of dispute IDs.
        :param transfer_i_ds: Optional parameter to filter by a comma separated list of transfer IDs.
        :param order_by:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListDisputesRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            skip=skip,
            count=count,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            respond_start_date_time=respond_start_date_time,
            respond_end_date_time=respond_end_date_time,
            status=status,
            merchant_account_id=merchant_account_id,
            cardholder_account_id=cardholder_account_id,
            dispute_i_ds=dispute_i_ds,
            transfer_i_ds=transfer_i_ds,
            order_by=order_by,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/disputes",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.ListDisputesSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="listDisputes", oauth2_scopes=[], security_source=security
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, List[models.Dispute])
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_disputes_async(
        self,
        *,
        security: Union[
            models.ListDisputesSecurity, models.ListDisputesSecurityTypedDict
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        start_date_time: Optional[datetime] = None,
        end_date_time: Optional[datetime] = None,
        respond_start_date_time: Optional[datetime] = None,
        respond_end_date_time: Optional[datetime] = None,
        status: Optional[models.DisputeStatus] = None,
        merchant_account_id: Optional[str] = None,
        cardholder_account_id: Optional[str] = None,
        dispute_i_ds: Optional[List[str]] = None,
        transfer_i_ds: Optional[List[str]] = None,
        order_by: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.Dispute]:
        r"""Returns the list of disputes.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param start_date_time: Optional date-time parameter to filter all disputes created on and after the provided date and time.
        :param end_date_time: Optional date-time parameter to filter all disputes created on and before the provided date and time.
        :param respond_start_date_time: Optional date-time which exclusively filters all disputes with respond by before this date-time.
        :param respond_end_date_time: Optional date-time which exclusively filters all disputes with respond by before this date-time.
        :param status: Optional dispute status by which to filter the disputes.
        :param merchant_account_id: Optional parameter to filter by merchant account ID.
        :param cardholder_account_id: Optional parameter to filter by cardholder account ID.
        :param dispute_i_ds: Optional parameter to filter by a comma separated list of dispute IDs.
        :param transfer_i_ds: Optional parameter to filter by a comma separated list of transfer IDs.
        :param order_by:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListDisputesRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            skip=skip,
            count=count,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            respond_start_date_time=respond_start_date_time,
            respond_end_date_time=respond_end_date_time,
            status=status,
            merchant_account_id=merchant_account_id,
            cardholder_account_id=cardholder_account_id,
            dispute_i_ds=dispute_i_ds,
            transfer_i_ds=transfer_i_ds,
            order_by=order_by,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/disputes",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.ListDisputesSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="listDisputes", oauth2_scopes=[], security_source=security
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, List[models.Dispute])
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_dispute(
        self,
        *,
        security: Union[models.GetDisputeSecurity, models.GetDisputeSecurityTypedDict],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.Dispute:
        r"""Get a dispute by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDisputeRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetDisputeSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="getDispute", oauth2_scopes=[], security_source=security
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.Dispute)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_dispute_async(
        self,
        *,
        security: Union[models.GetDisputeSecurity, models.GetDisputeSecurityTypedDict],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.Dispute:
        r"""Get a dispute by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDisputeRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetDisputeSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="getDispute", oauth2_scopes=[], security_source=security
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.Dispute)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def accept_dispute(
        self,
        *,
        security: Union[
            models.AcceptDisputeSecurity, models.AcceptDisputeSecurityTypedDict
        ],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.Dispute:
        r"""Accepts a dispute.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.AcceptDisputeRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/accept",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.AcceptDisputeSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="acceptDispute", oauth2_scopes=[], security_source=security
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.Dispute)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def accept_dispute_async(
        self,
        *,
        security: Union[
            models.AcceptDisputeSecurity, models.AcceptDisputeSecurityTypedDict
        ],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.Dispute:
        r"""Accepts a dispute.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.AcceptDisputeRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request_async(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/accept",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.AcceptDisputeSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="acceptDispute", oauth2_scopes=[], security_source=security
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.Dispute)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_dispute_evidence(
        self,
        *,
        security: Union[
            models.ListDisputeEvidenceSecurity,
            models.ListDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.DisputeEvidenceMetadata]:
        r"""Returns a dispute's public evidence by its ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListDisputeEvidenceSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="listDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.DisputeEvidenceMetadata]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_dispute_evidence_async(
        self,
        *,
        security: Union[
            models.ListDisputeEvidenceSecurity,
            models.ListDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.DisputeEvidenceMetadata]:
        r"""Returns a dispute's public evidence by its ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListDisputeEvidenceSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="listDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.DisputeEvidenceMetadata]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def upload_dispute_evidence_file(
        self,
        *,
        security: Union[
            models.UploadDisputeEvidenceFileSecurity,
            models.UploadDisputeEvidenceFileSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        file: Union[models.File, models.FileTypedDict],
        evidence_type: models.EvidenceType,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Uploads a file as evidence for a dispute.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param file: The file to upload as evidence. Valid types are [jpeg, tiff, pdf].  The `Content-Type` header for this form part must be one of the following:   - `image/jpeg`   - `image/tiff`   - `application/pdf`
        :param evidence_type:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UploadDisputeEvidenceFileRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            create_evidence_file_multi_part=models.CreateEvidenceFileMultiPart(
                file=utils.get_pydantic_model(file, models.File),
                evidence_type=evidence_type,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence-file",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UploadDisputeEvidenceFileSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_evidence_file_multi_part,
                False,
                False,
                "multipart",
                models.CreateEvidenceFileMultiPart,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="uploadDisputeEvidenceFile",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def upload_dispute_evidence_file_async(
        self,
        *,
        security: Union[
            models.UploadDisputeEvidenceFileSecurity,
            models.UploadDisputeEvidenceFileSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        file: Union[models.File, models.FileTypedDict],
        evidence_type: models.EvidenceType,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Uploads a file as evidence for a dispute.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param file: The file to upload as evidence. Valid types are [jpeg, tiff, pdf].  The `Content-Type` header for this form part must be one of the following:   - `image/jpeg`   - `image/tiff`   - `application/pdf`
        :param evidence_type:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UploadDisputeEvidenceFileRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            create_evidence_file_multi_part=models.CreateEvidenceFileMultiPart(
                file=utils.get_pydantic_model(file, models.File),
                evidence_type=evidence_type,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence-file",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UploadDisputeEvidenceFileSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_evidence_file_multi_part,
                False,
                False,
                "multipart",
                models.CreateEvidenceFileMultiPart,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="uploadDisputeEvidenceFile",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def upload_dispute_evidence_text(
        self,
        *,
        security: Union[
            models.UploadDisputeEvidenceTextSecurity,
            models.UploadDisputeEvidenceTextSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        text: str,
        evidence_type: models.EvidenceType,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EvidenceText:
        r"""Uploads text as evidence for a dispute.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param text: The text to associate with the dispute as evidence.
        :param evidence_type:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UploadDisputeEvidenceTextRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            create_evidence_text=models.CreateEvidenceText(
                text=text,
                evidence_type=evidence_type,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence-text",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UploadDisputeEvidenceTextSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_evidence_text,
                False,
                False,
                "json",
                models.CreateEvidenceText,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="uploadDisputeEvidenceText",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return utils.unmarshal_json(http_res.text, models.EvidenceText)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def upload_dispute_evidence_text_async(
        self,
        *,
        security: Union[
            models.UploadDisputeEvidenceTextSecurity,
            models.UploadDisputeEvidenceTextSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        text: str,
        evidence_type: models.EvidenceType,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EvidenceText:
        r"""Uploads text as evidence for a dispute.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param text: The text to associate with the dispute as evidence.
        :param evidence_type:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UploadDisputeEvidenceTextRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            create_evidence_text=models.CreateEvidenceText(
                text=text,
                evidence_type=evidence_type,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence-text",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UploadDisputeEvidenceTextSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_evidence_text,
                False,
                False,
                "json",
                models.CreateEvidenceText,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="uploadDisputeEvidenceText",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return utils.unmarshal_json(http_res.text, models.EvidenceText)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def submit_dispute_evidence(
        self,
        *,
        security: Union[
            models.SubmitDisputeEvidenceSecurity,
            models.SubmitDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.Dispute:
        r"""Submit the evidence associated with a dispute.

        Evidence items must be uploaded using the appropriate endpoint(s) prior to calling this endpoint to submit it. **Evidence can only
        be submitted once per dispute.**

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.SubmitDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/submit",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.SubmitDisputeEvidenceSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="submitDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.Dispute)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def submit_dispute_evidence_async(
        self,
        *,
        security: Union[
            models.SubmitDisputeEvidenceSecurity,
            models.SubmitDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.Dispute:
        r"""Submit the evidence associated with a dispute.

        Evidence items must be uploaded using the appropriate endpoint(s) prior to calling this endpoint to submit it. **Evidence can only
        be submitted once per dispute.**

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.SubmitDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
        )

        req = self._build_request_async(
            method="POST",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/submit",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.SubmitDisputeEvidenceSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="submitDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.Dispute)
        if utils.match_response(http_res, ["400", "409"], "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_dispute_evidence(
        self,
        *,
        security: Union[
            models.GetDisputeEvidenceSecurity,
            models.GetDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DisputeEvidenceMetadata:
        r"""Get dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetDisputeEvidenceSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="getDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DisputeEvidenceMetadata)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_dispute_evidence_async(
        self,
        *,
        security: Union[
            models.GetDisputeEvidenceSecurity,
            models.GetDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DisputeEvidenceMetadata:
        r"""Get dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetDisputeEvidenceSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="getDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DisputeEvidenceMetadata)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def update_dispute_evidence(
        self,
        *,
        security: Union[
            models.UpdateDisputeEvidenceSecurity,
            models.UpdateDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        text: Optional[str] = None,
        evidence_type: Optional[models.EvidenceType] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DisputeEvidenceMetadata:
        r"""Updates dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param text: The text to associate with the dispute as evidence.
        :param evidence_type:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
            update_evidence=models.UpdateEvidence(
                text=text,
                evidence_type=evidence_type,
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UpdateDisputeEvidenceSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_evidence, False, False, "json", models.UpdateEvidence
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="updateDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DisputeEvidenceMetadata)
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def update_dispute_evidence_async(
        self,
        *,
        security: Union[
            models.UpdateDisputeEvidenceSecurity,
            models.UpdateDisputeEvidenceSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        text: Optional[str] = None,
        evidence_type: Optional[models.EvidenceType] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DisputeEvidenceMetadata:
        r"""Updates dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param text: The text to associate with the dispute as evidence.
        :param evidence_type:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.UpdateDisputeEvidenceRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
            update_evidence=models.UpdateEvidence(
                text=text,
                evidence_type=evidence_type,
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.UpdateDisputeEvidenceSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_evidence, False, False, "json", models.UpdateEvidence
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="updateDisputeEvidence",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.DisputeEvidenceMetadata)
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def delete_dispute_evidence_file(
        self,
        *,
        security: Union[
            models.DeleteDisputeEvidenceFileSecurity,
            models.DeleteDisputeEvidenceFileSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Deletes dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteDisputeEvidenceFileRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
        )

        req = self._build_request(
            method="DELETE",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.DeleteDisputeEvidenceFileSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="deleteDisputeEvidenceFile",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "409", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def delete_dispute_evidence_file_async(
        self,
        *,
        security: Union[
            models.DeleteDisputeEvidenceFileSecurity,
            models.DeleteDisputeEvidenceFileSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ):
        r"""Deletes dispute evidence by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.write` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.DeleteDisputeEvidenceFileRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.DeleteDisputeEvidenceFileSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="deleteDisputeEvidenceFile",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=[
                "401",
                "403",
                "404",
                "409",
                "429",
                "4XX",
                "500",
                "504",
                "5XX",
            ],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "204", "*"):
            return
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "409", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.GenericErrorData)
            raise models.GenericError(data=data)
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_dispute_evidence_data(
        self,
        *,
        security: Union[
            models.GetDisputeEvidenceDataSecurity,
            models.GetDisputeEvidenceDataSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetDisputeEvidenceDataAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDisputeEvidenceDataResponse:
        r"""Downloads dispute evidence data by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDisputeEvidenceDataRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
        )

        req = self._build_request(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/pdf;q=1, image/jpeg;q=0.7, image/tiff;q=0",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetDisputeEvidenceDataSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="getDisputeEvidenceData",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/pdf"):
            return http_res
        if utils.match_response(http_res, "200", "image/jpeg"):
            return http_res
        if utils.match_response(http_res, "200", "image/tiff"):
            return http_res
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_dispute_evidence_data_async(
        self,
        *,
        security: Union[
            models.GetDisputeEvidenceDataSecurity,
            models.GetDisputeEvidenceDataSecurityTypedDict,
        ],
        account_id: str,
        dispute_id: str,
        evidence_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetDisputeEvidenceDataAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetDisputeEvidenceDataResponse:
        r"""Downloads dispute evidence data by ID.

        Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/) to learn more.

        To use this endpoint from the browser, you'll need to specify the `/accounts/{accountID}/transfers.read` scope when generating
        a [token](https://docs.moov.io/api/authentication/access-tokens/).

        :param security:
        :param account_id:
        :param dispute_id:
        :param evidence_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetDisputeEvidenceDataRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            dispute_id=dispute_id,
            evidence_id=evidence_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/accounts/{accountID}/disputes/{disputeID}/evidence/{evidenceID}/data",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/pdf;q=1, image/jpeg;q=0.7, image/tiff;q=0",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetDisputeEvidenceDataSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="getDisputeEvidenceData",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/pdf"):
            return http_res
        if utils.match_response(http_res, "200", "image/jpeg"):
            return http_res
        if utils.match_response(http_res, "200", "image/tiff"):
            return http_res
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
