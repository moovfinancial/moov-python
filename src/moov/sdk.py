"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from moov import models, utils
from moov._hooks import SDKHooks
from moov.accounts import Accounts
from moov.adjustments import Adjustments
from moov.authentication import Authentication
from moov.avatars import Avatars
from moov.bank_accounts import BankAccounts
from moov.billing import Billing
from moov.branding import Branding
from moov.capabilities import Capabilities
from moov.card_issuing import CardIssuing
from moov.cards import Cards
from moov.disputes import Disputes
from moov.end_to_end_encryption import EndToEndEncryption
from moov.enriched_address import EnrichedAddress
from moov.enriched_profile import EnrichedProfile
from moov.files import Files
from moov.industries import Industries
from moov.institutions import Institutions
from moov.issuing_transactions import IssuingTransactions
from moov.onboarding import Onboarding
from moov.payment_links import PaymentLinks
from moov.payment_methods import PaymentMethods
from moov.ping import Ping
from moov.representatives import Representatives
from moov.scheduling import Scheduling
from moov.sweeps import Sweeps
from moov.transfers import Transfers
from moov.types import OptionalNullable, UNSET
from moov.underwriting_sdk import UnderwritingSDK
from moov.wallet_transactions import WalletTransactions
from moov.wallets import Wallets
from typing import Callable, Dict, Optional, Union


class Moov(BaseSDK):
    r"""Moov API: Moov is a platform that enables developers to integrate all aspects of money movement with ease and speed.
    The Moov API makes it simple for platforms to send, receive, and store money. Our API is based upon REST
    principles, returns JSON responses, and uses standard HTTP response codes. To learn more about how Moov
    works at a high level, read our [concepts](https://docs.moov.io/guides/get-started/glossary/) guide.
    """

    accounts: Accounts
    adjustments: Adjustments
    cards: Cards
    bank_accounts: BankAccounts
    branding: Branding
    capabilities: Capabilities
    disputes: Disputes
    billing: Billing
    files: Files
    payment_links: PaymentLinks
    payment_methods: PaymentMethods
    representatives: Representatives
    scheduling: Scheduling
    sweeps: Sweeps
    transfers: Transfers
    underwriting: UnderwritingSDK
    wallets: Wallets
    wallet_transactions: WalletTransactions
    avatars: Avatars
    end_to_end_encryption: EndToEndEncryption
    enriched_address: EnrichedAddress
    enriched_profile: EnrichedProfile
    industries: Industries
    institutions: Institutions
    issuing_transactions: IssuingTransactions
    card_issuing: CardIssuing
    authentication: Authentication
    onboarding: Onboarding
    ping: Ping

    def __init__(
        self,
        security: Optional[
            Union[models.Security, Callable[[], models.Security]]
        ] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.accounts = Accounts(self.sdk_configuration)
        self.adjustments = Adjustments(self.sdk_configuration)
        self.cards = Cards(self.sdk_configuration)
        self.bank_accounts = BankAccounts(self.sdk_configuration)
        self.branding = Branding(self.sdk_configuration)
        self.capabilities = Capabilities(self.sdk_configuration)
        self.disputes = Disputes(self.sdk_configuration)
        self.billing = Billing(self.sdk_configuration)
        self.files = Files(self.sdk_configuration)
        self.payment_links = PaymentLinks(self.sdk_configuration)
        self.payment_methods = PaymentMethods(self.sdk_configuration)
        self.representatives = Representatives(self.sdk_configuration)
        self.scheduling = Scheduling(self.sdk_configuration)
        self.sweeps = Sweeps(self.sdk_configuration)
        self.transfers = Transfers(self.sdk_configuration)
        self.underwriting = UnderwritingSDK(self.sdk_configuration)
        self.wallets = Wallets(self.sdk_configuration)
        self.wallet_transactions = WalletTransactions(self.sdk_configuration)
        self.avatars = Avatars(self.sdk_configuration)
        self.end_to_end_encryption = EndToEndEncryption(self.sdk_configuration)
        self.enriched_address = EnrichedAddress(self.sdk_configuration)
        self.enriched_profile = EnrichedProfile(self.sdk_configuration)
        self.industries = Industries(self.sdk_configuration)
        self.institutions = Institutions(self.sdk_configuration)
        self.issuing_transactions = IssuingTransactions(self.sdk_configuration)
        self.card_issuing = CardIssuing(self.sdk_configuration)
        self.authentication = Authentication(self.sdk_configuration)
        self.onboarding = Onboarding(self.sdk_configuration)
        self.ping = Ping(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.client is not None:
            self.sdk_configuration.client.close()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.async_client is not None:
            await self.sdk_configuration.async_client.aclose()
