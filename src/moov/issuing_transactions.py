"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from moov import models, utils
from moov._hooks import HookContext
from moov.types import OptionalNullable, UNSET
from typing import List, Mapping, Optional, Union


class IssuingTransactions(BaseSDK):
    def list_issued_card_authorizations(
        self,
        *,
        security: Union[
            models.ListIssuedCardAuthorizationsSecurity,
            models.ListIssuedCardAuthorizationsSecurityTypedDict,
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        issued_card_id: Optional[str] = None,
        start_date_time: Optional[datetime] = None,
        end_date_time: Optional[datetime] = None,
        statuses: Optional[List[models.IssuingAuthorizationStatus]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.IssuedCardAuthorization]:
        r"""List issued card authorizations associated with a Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param issued_card_id: Optional ID of the issued card to filter results.
        :param start_date_time: Optional date-time which inclusively filters all authorizations created after this date-time.
        :param end_date_time: Optional date-time which exclusively filters all authorizations created before this date-time.
        :param statuses: Optional, comma-separated statuses of the authorization to filter results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListIssuedCardAuthorizationsRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            skip=skip,
            count=count,
            issued_card_id=issued_card_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            statuses=statuses,
        )

        req = self._build_request(
            method="GET",
            path="/issuing/{accountID}/authorizations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListIssuedCardAuthorizationsSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="listIssuedCardAuthorizations",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.IssuedCardAuthorization]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_issued_card_authorizations_async(
        self,
        *,
        security: Union[
            models.ListIssuedCardAuthorizationsSecurity,
            models.ListIssuedCardAuthorizationsSecurityTypedDict,
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        issued_card_id: Optional[str] = None,
        start_date_time: Optional[datetime] = None,
        end_date_time: Optional[datetime] = None,
        statuses: Optional[List[models.IssuingAuthorizationStatus]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.IssuedCardAuthorization]:
        r"""List issued card authorizations associated with a Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param issued_card_id: Optional ID of the issued card to filter results.
        :param start_date_time: Optional date-time which inclusively filters all authorizations created after this date-time.
        :param end_date_time: Optional date-time which exclusively filters all authorizations created before this date-time.
        :param statuses: Optional, comma-separated statuses of the authorization to filter results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListIssuedCardAuthorizationsRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            skip=skip,
            count=count,
            issued_card_id=issued_card_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            statuses=statuses,
        )

        req = self._build_request_async(
            method="GET",
            path="/issuing/{accountID}/authorizations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListIssuedCardAuthorizationsSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="listIssuedCardAuthorizations",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.IssuedCardAuthorization]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_issued_card_authorization(
        self,
        *,
        security: Union[
            models.GetIssuedCardAuthorizationSecurity,
            models.GetIssuedCardAuthorizationSecurityTypedDict,
        ],
        account_id: str,
        authorization_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.IssuedCardAuthorization:
        r"""Retrieves details of an authorization associated with a specific Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param authorization_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetIssuedCardAuthorizationRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            authorization_id=authorization_id,
        )

        req = self._build_request(
            method="GET",
            path="/issuing/{accountID}/authorizations/{authorizationID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetIssuedCardAuthorizationSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="getIssuedCardAuthorization",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.IssuedCardAuthorization)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_issued_card_authorization_async(
        self,
        *,
        security: Union[
            models.GetIssuedCardAuthorizationSecurity,
            models.GetIssuedCardAuthorizationSecurityTypedDict,
        ],
        account_id: str,
        authorization_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.IssuedCardAuthorization:
        r"""Retrieves details of an authorization associated with a specific Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param authorization_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetIssuedCardAuthorizationRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            authorization_id=authorization_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/issuing/{accountID}/authorizations/{authorizationID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetIssuedCardAuthorizationSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="getIssuedCardAuthorization",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.IssuedCardAuthorization)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_issued_card_authorization_events(
        self,
        *,
        security: Union[
            models.ListIssuedCardAuthorizationEventsSecurity,
            models.ListIssuedCardAuthorizationEventsSecurityTypedDict,
        ],
        account_id: str,
        authorization_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.IssuedCardAuthorizationEvent]:
        r"""List card network and Moov platform events that affect the authorization and its hold on a wallet balance.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param authorization_id:
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListIssuedCardAuthorizationEventsRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            authorization_id=authorization_id,
            skip=skip,
            count=count,
        )

        req = self._build_request(
            method="GET",
            path="/issuing/{accountID}/authorizations/{authorizationID}/events",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListIssuedCardAuthorizationEventsSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="listIssuedCardAuthorizationEvents",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.IssuedCardAuthorizationEvent]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_issued_card_authorization_events_async(
        self,
        *,
        security: Union[
            models.ListIssuedCardAuthorizationEventsSecurity,
            models.ListIssuedCardAuthorizationEventsSecurityTypedDict,
        ],
        account_id: str,
        authorization_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.IssuedCardAuthorizationEvent]:
        r"""List card network and Moov platform events that affect the authorization and its hold on a wallet balance.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param authorization_id:
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListIssuedCardAuthorizationEventsRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            authorization_id=authorization_id,
            skip=skip,
            count=count,
        )

        req = self._build_request_async(
            method="GET",
            path="/issuing/{accountID}/authorizations/{authorizationID}/events",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListIssuedCardAuthorizationEventsSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="listIssuedCardAuthorizationEvents",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.IssuedCardAuthorizationEvent]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_issued_card_transactions(
        self,
        *,
        security: Union[
            models.ListIssuedCardTransactionsSecurity,
            models.ListIssuedCardTransactionsSecurityTypedDict,
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        issued_card_id: Optional[str] = None,
        start_date_time: Optional[datetime] = None,
        end_date_time: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.IssuedCardTransaction]:
        r"""List issued card transactions associated with a Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param issued_card_id: Optional ID of the issued card to filter results.
        :param start_date_time: Optional date-time which inclusively filters all card transactions created after this date-time.
        :param end_date_time: Optional date-time which exclusively filters all card transactions created before this date-time.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListIssuedCardTransactionsRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            skip=skip,
            count=count,
            issued_card_id=issued_card_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
        )

        req = self._build_request(
            method="GET",
            path="/issuing/{accountID}/card-transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListIssuedCardTransactionsSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="listIssuedCardTransactions",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.IssuedCardTransaction]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_issued_card_transactions_async(
        self,
        *,
        security: Union[
            models.ListIssuedCardTransactionsSecurity,
            models.ListIssuedCardTransactionsSecurityTypedDict,
        ],
        account_id: str,
        x_moov_version: Optional[models.Versions] = None,
        skip: Optional[int] = None,
        count: Optional[int] = None,
        issued_card_id: Optional[str] = None,
        start_date_time: Optional[datetime] = None,
        end_date_time: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.IssuedCardTransaction]:
        r"""List issued card transactions associated with a Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param x_moov_version: Specify an API version.
        :param skip:
        :param count:
        :param issued_card_id: Optional ID of the issued card to filter results.
        :param start_date_time: Optional date-time which inclusively filters all card transactions created after this date-time.
        :param end_date_time: Optional date-time which exclusively filters all card transactions created before this date-time.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.ListIssuedCardTransactionsRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            skip=skip,
            count=count,
            issued_card_id=issued_card_id,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
        )

        req = self._build_request_async(
            method="GET",
            path="/issuing/{accountID}/card-transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.ListIssuedCardTransactionsSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="listIssuedCardTransactions",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, List[models.IssuedCardTransaction]
            )
        if utils.match_response(http_res, ["401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_issued_card_transaction(
        self,
        *,
        security: Union[
            models.GetIssuedCardTransactionSecurity,
            models.GetIssuedCardTransactionSecurityTypedDict,
        ],
        account_id: str,
        card_transaction_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.IssuedCardTransaction:
        r"""Retrieves details of an issued card transaction associated with a specific Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param card_transaction_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetIssuedCardTransactionRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            card_transaction_id=card_transaction_id,
        )

        req = self._build_request(
            method="GET",
            path="/issuing/{accountID}/card-transactions/{cardTransactionID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetIssuedCardTransactionSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="getIssuedCardTransaction",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.IssuedCardTransaction)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_issued_card_transaction_async(
        self,
        *,
        security: Union[
            models.GetIssuedCardTransactionSecurity,
            models.GetIssuedCardTransactionSecurityTypedDict,
        ],
        account_id: str,
        card_transaction_id: str,
        x_moov_version: Optional[models.Versions] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.IssuedCardTransaction:
        r"""Retrieves details of an issued card transaction associated with a specific Moov account.

        To access this endpoint using a [token](https://docs.moov.io/api/authentication/access-tokens/) you'll need to specify
        the `/accounts/{accountID}/issued-cards.read` scope.

        :param security:
        :param account_id: The Moov business account for which cards have been issued.
        :param card_transaction_id:
        :param x_moov_version: Specify an API version.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.GetIssuedCardTransactionRequest(
            x_moov_version=x_moov_version,
            account_id=account_id,
            card_transaction_id=card_transaction_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/issuing/{accountID}/card-transactions/{cardTransactionID}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetIssuedCardTransactionSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="getIssuedCardTransaction",
                oauth2_scopes=[],
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "403", "404", "429", "4XX", "500", "504", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.IssuedCardTransaction)
        if utils.match_response(http_res, ["401", "403", "404", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "504", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
