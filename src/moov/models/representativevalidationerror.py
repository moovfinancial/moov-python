"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addresserror import AddressError, AddressErrorTypedDict
from .birthdatevalidationerror import (
    BirthDateValidationError,
    BirthDateValidationErrorTypedDict,
)
from .governmentiderror import GovernmentIDError, GovernmentIDErrorTypedDict
from .individualnameerror import IndividualNameError, IndividualNameErrorTypedDict
from .phonenumbererror import PhoneNumberError, PhoneNumberErrorTypedDict
from .representativeresponsibilitieserror import (
    RepresentativeResponsibilitiesError,
    RepresentativeResponsibilitiesErrorTypedDict,
)
from moov import utils
from moov.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RepresentativeValidationErrorErrorTypedDict(TypedDict):
    name: NotRequired[IndividualNameErrorTypedDict]
    phone: NotRequired[PhoneNumberErrorTypedDict]
    email: NotRequired[str]
    address: NotRequired[AddressErrorTypedDict]
    birth_date: NotRequired[BirthDateValidationErrorTypedDict]
    government_id: NotRequired[GovernmentIDErrorTypedDict]
    responsibilities: NotRequired[RepresentativeResponsibilitiesErrorTypedDict]


class RepresentativeValidationErrorError(BaseModel):
    name: Optional[IndividualNameError] = None

    phone: Optional[PhoneNumberError] = None

    email: Optional[str] = None

    address: Optional[AddressError] = None

    birth_date: Annotated[
        Optional[BirthDateValidationError], pydantic.Field(alias="birthDate")
    ] = None

    government_id: Annotated[
        Optional[GovernmentIDError], pydantic.Field(alias="governmentID")
    ] = None

    responsibilities: Optional[RepresentativeResponsibilitiesError] = None


class RepresentativeValidationErrorData(BaseModel):
    error: RepresentativeValidationErrorError


class RepresentativeValidationError(Exception):
    data: RepresentativeValidationErrorData

    def __init__(self, data: RepresentativeValidationErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, RepresentativeValidationErrorData)
