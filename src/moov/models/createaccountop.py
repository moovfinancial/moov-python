"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .accountwaitfor import AccountWaitFor
from .createaccount import CreateAccount, CreateAccountTypedDict
from .createaccounterror import CreateAccountError
from .schemebasicauth import SchemeBasicAuth, SchemeBasicAuthTypedDict
from .versions import Versions
from moov import utils
from moov.types import BaseModel
from moov.utils import FieldMetadata, HeaderMetadata, RequestMetadata, SecurityMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateAccountSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class CreateAccountSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class CreateAccountRequestTypedDict(TypedDict):
    create_account: CreateAccountTypedDict
    x_moov_version: NotRequired[Versions]
    r"""Specify an API version."""
    x_wait_for: NotRequired[AccountWaitFor]
    r"""Optional header that indicates whether to wait for the connection to be created before returning from the account creation."""


class CreateAccountRequest(BaseModel):
    create_account: Annotated[
        CreateAccount,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    x_moov_version: Annotated[
        Optional[Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    x_wait_for: Annotated[
        Optional[AccountWaitFor],
        pydantic.Field(alias="x-wait-for"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Optional header that indicates whether to wait for the connection to be created before returning from the account creation."""


class CreateAccountResponseBodyData(BaseModel):
    error: CreateAccountError


class CreateAccountResponseBody(Exception):
    r"""The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields."""

    data: CreateAccountResponseBodyData

    def __init__(self, data: CreateAccountResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, CreateAccountResponseBodyData)
