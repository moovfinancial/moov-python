"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .createaccountupdate import CreateAccountUpdate, CreateAccountUpdateTypedDict
from .patchaccounterror import PatchAccountError
from .schemebasicauth import SchemeBasicAuth, SchemeBasicAuthTypedDict
from .versions import Versions
from moov import utils
from moov.types import BaseModel
from moov.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PatchAccountSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class PatchAccountSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class PatchAccountRequestTypedDict(TypedDict):
    account_id: str
    create_account_update: CreateAccountUpdateTypedDict
    x_moov_version: NotRequired[Versions]
    r"""Specify an API version."""


class PatchAccountRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    create_account_update: Annotated[
        CreateAccountUpdate,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    x_moov_version: Annotated[
        Optional[Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""


class PatchAccountResponseBodyData(BaseModel):
    error: PatchAccountError


class PatchAccountResponseBody(Exception):
    r"""The request was well-formed, but the contents failed validation. Check the request for missing or invalid fields."""

    data: PatchAccountResponseBodyData

    def __init__(self, data: PatchAccountResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, PatchAccountResponseBodyData)
