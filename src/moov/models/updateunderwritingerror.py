"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .cardvolumedistributionerror import (
    CardVolumeDistributionError,
    CardVolumeDistributionErrorTypedDict,
)
from .fulfillmentdetailserror import (
    FulfillmentDetailsError,
    FulfillmentDetailsErrorTypedDict,
)
from .volumebycustomertypeerror import (
    VolumeByCustomerTypeError,
    VolumeByCustomerTypeErrorTypedDict,
)
from moov import utils
from moov.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateUnderwritingErrorErrorTypedDict(TypedDict):
    average_monthly_transaction_volume: NotRequired[str]
    average_transaction_size: NotRequired[str]
    max_transaction_size: NotRequired[str]
    volume_by_customer_type: NotRequired[VolumeByCustomerTypeErrorTypedDict]
    card_volume_distribution: NotRequired[CardVolumeDistributionErrorTypedDict]
    fulfillment: NotRequired[FulfillmentDetailsErrorTypedDict]


class UpdateUnderwritingErrorError(BaseModel):
    average_monthly_transaction_volume: Annotated[
        Optional[str], pydantic.Field(alias="averageMonthlyTransactionVolume")
    ] = None

    average_transaction_size: Annotated[
        Optional[str], pydantic.Field(alias="averageTransactionSize")
    ] = None

    max_transaction_size: Annotated[
        Optional[str], pydantic.Field(alias="maxTransactionSize")
    ] = None

    volume_by_customer_type: Annotated[
        Optional[VolumeByCustomerTypeError],
        pydantic.Field(alias="volumeByCustomerType"),
    ] = None

    card_volume_distribution: Annotated[
        Optional[CardVolumeDistributionError],
        pydantic.Field(alias="cardVolumeDistribution"),
    ] = None

    fulfillment: Optional[FulfillmentDetailsError] = None


class UpdateUnderwritingErrorData(BaseModel):
    error: UpdateUnderwritingErrorError


class UpdateUnderwritingError(Exception):
    data: UpdateUnderwritingErrorData

    def __init__(self, data: UpdateUnderwritingErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, UpdateUnderwritingErrorData)
