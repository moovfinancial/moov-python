"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .asynctransfer import AsyncTransfer, AsyncTransferTypedDict
from .createtransfer import CreateTransfer, CreateTransferTypedDict
from .schemebasicauth import SchemeBasicAuth, SchemeBasicAuthTypedDict
from .transfer import Transfer, TransferTypedDict
from .transferwaitfor import TransferWaitFor
from .versions import Versions
from moov.types import BaseModel
from moov.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class CreateTransferSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class CreateTransferSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class CreateTransferRequestTypedDict(TypedDict):
    x_idempotency_key: str
    r"""Prevents duplicate transfers from being created."""
    account_id: str
    r"""The merchant's Moov account ID."""
    create_transfer: CreateTransferTypedDict
    x_moov_version: NotRequired[Versions]
    r"""Specify an API version."""
    x_wait_for: NotRequired[TransferWaitFor]
    r"""Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
    asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
    """


class CreateTransferRequest(BaseModel):
    x_idempotency_key: Annotated[
        str,
        pydantic.Field(alias="x-idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""Prevents duplicate transfers from being created."""

    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The merchant's Moov account ID."""

    create_transfer: Annotated[
        CreateTransfer,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    x_moov_version: Annotated[
        Optional[Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    x_wait_for: Annotated[
        Optional[TransferWaitFor],
        pydantic.Field(alias="x-wait-for"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
    asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
    """


CreateTransferResponseBodyTypedDict = TypeAliasType(
    "CreateTransferResponseBodyTypedDict",
    Union[AsyncTransferTypedDict, TransferTypedDict],
)
r"""The request completed successfully."""


CreateTransferResponseBody = TypeAliasType(
    "CreateTransferResponseBody", Union[AsyncTransfer, Transfer]
)
r"""The request completed successfully."""


CreateTransferResponseTypedDict = TypeAliasType(
    "CreateTransferResponseTypedDict",
    Union[
        AsyncTransferTypedDict, TransferTypedDict, CreateTransferResponseBodyTypedDict
    ],
)


CreateTransferResponse = TypeAliasType(
    "CreateTransferResponse", Union[AsyncTransfer, Transfer, CreateTransferResponseBody]
)
