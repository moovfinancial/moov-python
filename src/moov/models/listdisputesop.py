"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .disputestatus import DisputeStatus
from .schemebasicauth import SchemeBasicAuth, SchemeBasicAuthTypedDict
from .versions import Versions
from datetime import datetime
from moov.types import BaseModel
from moov.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListDisputesSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class ListDisputesSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class ListDisputesRequestTypedDict(TypedDict):
    account_id: str
    x_moov_version: NotRequired[Versions]
    r"""Specify an API version."""
    skip: NotRequired[int]
    count: NotRequired[int]
    start_date_time: NotRequired[datetime]
    r"""Optional date-time parameter to filter all disputes created on and after the provided date and time."""
    end_date_time: NotRequired[datetime]
    r"""Optional date-time parameter to filter all disputes created on and before the provided date and time."""
    respond_start_date_time: NotRequired[datetime]
    r"""Optional date-time which exclusively filters all disputes with respond by before this date-time."""
    respond_end_date_time: NotRequired[datetime]
    r"""Optional date-time which exclusively filters all disputes with respond by before this date-time."""
    status: NotRequired[DisputeStatus]
    r"""Optional dispute status by which to filter the disputes."""
    merchant_account_id: NotRequired[str]
    r"""Optional parameter to filter by merchant account ID."""
    cardholder_account_id: NotRequired[str]
    r"""Optional parameter to filter by cardholder account ID."""
    dispute_i_ds: NotRequired[List[str]]
    r"""Optional parameter to filter by a comma separated list of dispute IDs."""
    transfer_i_ds: NotRequired[List[str]]
    r"""Optional parameter to filter by a comma separated list of transfer IDs."""
    order_by: NotRequired[str]


class ListDisputesRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    x_moov_version: Annotated[
        Optional[Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    skip: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None

    count: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None

    start_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="startDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time parameter to filter all disputes created on and after the provided date and time."""

    end_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="endDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time parameter to filter all disputes created on and before the provided date and time."""

    respond_start_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="respondStartDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which exclusively filters all disputes with respond by before this date-time."""

    respond_end_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="respondEndDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which exclusively filters all disputes with respond by before this date-time."""

    status: Annotated[
        Optional[DisputeStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional dispute status by which to filter the disputes."""

    merchant_account_id: Annotated[
        Optional[str],
        pydantic.Field(alias="merchantAccountID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by merchant account ID."""

    cardholder_account_id: Annotated[
        Optional[str],
        pydantic.Field(alias="cardholderAccountID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by cardholder account ID."""

    dispute_i_ds: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="disputeIDs"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by a comma separated list of dispute IDs."""

    transfer_i_ds: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="transferIDs"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by a comma separated list of transfer IDs."""

    order_by: Annotated[
        Optional[str],
        pydantic.Field(alias="orderBy"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
