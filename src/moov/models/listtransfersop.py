"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .schemebasicauth import SchemeBasicAuth, SchemeBasicAuthTypedDict
from .transferstatus import TransferStatus
from .versions import Versions
from datetime import datetime
from moov.types import BaseModel
from moov.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListTransfersSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class ListTransfersSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class ListTransfersRequestTypedDict(TypedDict):
    account_id: str
    x_moov_version: NotRequired[Versions]
    r"""Specify an API version."""
    account_i_ds: NotRequired[List[str]]
    r"""Optional, comma-separated account IDs by which the response is filtered based on whether the account ID is the source or destination."""
    status: NotRequired[TransferStatus]
    r"""Optional parameter for filtering transfers by status."""
    start_date_time: NotRequired[datetime]
    r"""Optional date-time which inclusively filters all transfers created after this date-time."""
    end_date_time: NotRequired[datetime]
    r"""Optional date-time which exclusively filters all transfers created before this date-time."""
    group_id: NotRequired[str]
    r"""Optional ID to filter for transfers in the same group."""
    refunded: NotRequired[bool]
    r"""Optional parameter to only return refunded transfers."""
    disputed: NotRequired[bool]
    r"""Optional parameter to only return disputed transfers."""
    skip: NotRequired[int]
    count: NotRequired[int]


class ListTransfersRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    x_moov_version: Annotated[
        Optional[Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    account_i_ds: Annotated[
        Optional[List[str]],
        pydantic.Field(alias="accountIDs"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional, comma-separated account IDs by which the response is filtered based on whether the account ID is the source or destination."""

    status: Annotated[
        Optional[TransferStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter for filtering transfers by status."""

    start_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="startDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which inclusively filters all transfers created after this date-time."""

    end_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="endDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which exclusively filters all transfers created before this date-time."""

    group_id: Annotated[
        Optional[str],
        pydantic.Field(alias="groupID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional ID to filter for transfers in the same group."""

    refunded: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to only return refunded transfers."""

    disputed: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to only return disputed transfers."""

    skip: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None

    count: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
