"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from moovio_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FixedAmountTypedDict(TypedDict):
    r"""A fixed fee that is applied to the amount of each transaction in the `fixed` and `blended` fee models."""

    currency: str
    r"""A 3-letter ISO 4217 currency code."""
    value_decimal: str
    r"""A decimal-formatted numerical string that represents up to 9 decimal place precision.

    For example, $12.987654321 is '12.987654321'.
    """


class FixedAmount(BaseModel):
    r"""A fixed fee that is applied to the amount of each transaction in the `fixed` and `blended` fee models."""

    currency: str
    r"""A 3-letter ISO 4217 currency code."""

    value_decimal: Annotated[str, pydantic.Field(alias="valueDecimal")]
    r"""A decimal-formatted numerical string that represents up to 9 decimal place precision.

    For example, $12.987654321 is '12.987654321'.
    """


class MinPerTransactionTypedDict(TypedDict):
    r"""Specifies the minimum allowable spending for a single transaction, working as a transaction floor."""

    currency: str
    r"""A 3-letter ISO 4217 currency code."""
    value_decimal: str
    r"""A decimal-formatted numerical string that represents up to 9 decimal place precision.

    For example, $12.987654321 is '12.987654321'.
    """


class MinPerTransaction(BaseModel):
    r"""Specifies the minimum allowable spending for a single transaction, working as a transaction floor."""

    currency: str
    r"""A 3-letter ISO 4217 currency code."""

    value_decimal: Annotated[str, pydantic.Field(alias="valueDecimal")]
    r"""A decimal-formatted numerical string that represents up to 9 decimal place precision.

    For example, $12.987654321 is '12.987654321'.
    """


class MaxPerTransactionTypedDict(TypedDict):
    r"""Specifies the maximum allowable spending for a single transaction, working as a transaction ceiling."""

    currency: str
    r"""A 3-letter ISO 4217 currency code."""
    value_decimal: str
    r"""A decimal-formatted numerical string that represents up to 9 decimal place precision.

    For example, $12.987654321 is '12.987654321'.
    """


class MaxPerTransaction(BaseModel):
    r"""Specifies the maximum allowable spending for a single transaction, working as a transaction ceiling."""

    currency: str
    r"""A 3-letter ISO 4217 currency code."""

    value_decimal: Annotated[str, pydantic.Field(alias="valueDecimal")]
    r"""A decimal-formatted numerical string that represents up to 9 decimal place precision.

    For example, $12.987654321 is '12.987654321'.
    """


class FeePropertiesTypedDict(TypedDict):
    r"""Defines the specific parameters used for fee calculation."""

    fixed_amount: NotRequired[Nullable[FixedAmountTypedDict]]
    r"""A fixed fee that is applied to the amount of each transaction in the `fixed` and `blended` fee models."""
    variable_rate: NotRequired[str]
    r"""A percentage fee that is applied to the amount of each transaction in the `blended` fee model, expressed as a decimal.

    For example, 0.05% is '0.05'.
    """
    min_per_transaction: NotRequired[Nullable[MinPerTransactionTypedDict]]
    r"""Specifies the minimum allowable spending for a single transaction, working as a transaction floor."""
    max_per_transaction: NotRequired[Nullable[MaxPerTransactionTypedDict]]
    r"""Specifies the maximum allowable spending for a single transaction, working as a transaction ceiling."""


class FeeProperties(BaseModel):
    r"""Defines the specific parameters used for fee calculation."""

    fixed_amount: Annotated[
        OptionalNullable[FixedAmount], pydantic.Field(alias="fixedAmount")
    ] = UNSET
    r"""A fixed fee that is applied to the amount of each transaction in the `fixed` and `blended` fee models."""

    variable_rate: Annotated[Optional[str], pydantic.Field(alias="variableRate")] = None
    r"""A percentage fee that is applied to the amount of each transaction in the `blended` fee model, expressed as a decimal.

    For example, 0.05% is '0.05'.
    """

    min_per_transaction: Annotated[
        OptionalNullable[MinPerTransaction], pydantic.Field(alias="minPerTransaction")
    ] = UNSET
    r"""Specifies the minimum allowable spending for a single transaction, working as a transaction floor."""

    max_per_transaction: Annotated[
        OptionalNullable[MaxPerTransaction], pydantic.Field(alias="maxPerTransaction")
    ] = UNSET
    r"""Specifies the maximum allowable spending for a single transaction, working as a transaction ceiling."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "fixedAmount",
            "variableRate",
            "minPerTransaction",
            "maxPerTransaction",
        ]
        nullable_fields = ["fixedAmount", "minPerTransaction", "maxPerTransaction"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
