"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from moovio_sdk.models.components import (
    schemebasicauth as components_schemebasicauth,
    versions as components_versions,
    wallettransactionsourcetype as components_wallettransactionsourcetype,
    wallettransactionstatus as components_wallettransactionstatus,
    wallettransactiontype as components_wallettransactiontype,
)
from moovio_sdk.types import BaseModel
from moovio_sdk.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListWalletTransactionsSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[components_schemebasicauth.SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class ListWalletTransactionsSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[components_schemebasicauth.SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class ListWalletTransactionsRequestTypedDict(TypedDict):
    account_id: str
    wallet_id: str
    x_moov_version: NotRequired[components_versions.Versions]
    r"""Specify an API version."""
    skip: NotRequired[int]
    count: NotRequired[int]
    transaction_type: NotRequired[
        components_wallettransactiontype.WalletTransactionType
    ]
    r"""Optional parameter to filter by transaction type."""
    source_type: NotRequired[
        components_wallettransactionsourcetype.WalletTransactionSourceType
    ]
    r"""Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction)."""
    source_id: NotRequired[str]
    r"""Optional parameter to filter by source ID."""
    status: NotRequired[components_wallettransactionstatus.WalletTransactionStatus]
    r"""Optional parameter to filter by status (`pending` or `completed`)."""
    created_start_date_time: NotRequired[datetime]
    r"""Optional date-time which inclusively filters all transactions created after this date-time."""
    created_end_date_time: NotRequired[datetime]
    r"""Optional date-time which exclusively filters all transactions created before this date-time."""
    completed_start_date_time: NotRequired[datetime]
    r"""Optional date-time which inclusively filters all transactions completed after this date-time."""
    completed_end_date_time: NotRequired[datetime]
    r"""Optional date-time which exclusively filters all transactions completed before this date-time."""
    sweep_id: NotRequired[str]
    r"""Optional ID to filter for transactions accrued in a sweep."""


class ListWalletTransactionsRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    wallet_id: Annotated[
        str,
        pydantic.Field(alias="walletID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    x_moov_version: Annotated[
        Optional[components_versions.Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    skip: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None

    count: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None

    transaction_type: Annotated[
        Optional[components_wallettransactiontype.WalletTransactionType],
        pydantic.Field(alias="transactionType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by transaction type."""

    source_type: Annotated[
        Optional[components_wallettransactionsourcetype.WalletTransactionSourceType],
        pydantic.Field(alias="sourceType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction)."""

    source_id: Annotated[
        Optional[str],
        pydantic.Field(alias="sourceID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by source ID."""

    status: Annotated[
        Optional[components_wallettransactionstatus.WalletTransactionStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional parameter to filter by status (`pending` or `completed`)."""

    created_start_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="createdStartDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which inclusively filters all transactions created after this date-time."""

    created_end_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="createdEndDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which exclusively filters all transactions created before this date-time."""

    completed_start_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="completedStartDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which inclusively filters all transactions completed after this date-time."""

    completed_end_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="completedEndDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which exclusively filters all transactions completed before this date-time."""

    sweep_id: Annotated[
        Optional[str],
        pydantic.Field(alias="sweepID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional ID to filter for transactions accrued in a sweep."""
