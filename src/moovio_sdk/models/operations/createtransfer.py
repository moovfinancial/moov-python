"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from moovio_sdk.models.components import (
    asynctransfer as components_asynctransfer,
    createtransfer as components_createtransfer,
    schemebasicauth as components_schemebasicauth,
    transfer as components_transfer,
    transferwaitfor as components_transferwaitfor,
    versions as components_versions,
)
from moovio_sdk.types import BaseModel
from moovio_sdk.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class CreateTransferSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[components_schemebasicauth.SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class CreateTransferSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[components_schemebasicauth.SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class CreateTransferRequestTypedDict(TypedDict):
    x_idempotency_key: str
    r"""Prevents duplicate transfers from being created."""
    account_id: str
    r"""The merchant's Moov account ID."""
    create_transfer: components_createtransfer.CreateTransferTypedDict
    x_moov_version: NotRequired[components_versions.Versions]
    r"""Specify an API version."""
    x_wait_for: NotRequired[components_transferwaitfor.TransferWaitFor]
    r"""Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
    asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
    """


class CreateTransferRequest(BaseModel):
    x_idempotency_key: Annotated[
        str,
        pydantic.Field(alias="x-idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""Prevents duplicate transfers from being created."""

    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The merchant's Moov account ID."""

    create_transfer: Annotated[
        components_createtransfer.CreateTransfer,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    x_moov_version: Annotated[
        Optional[components_versions.Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    x_wait_for: Annotated[
        Optional[components_transferwaitfor.TransferWaitFor],
        pydantic.Field(alias="x-wait-for"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
    asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
    """


CreateTransferResponseBodyTypedDict = TypeAliasType(
    "CreateTransferResponseBodyTypedDict",
    Union[
        components_asynctransfer.AsyncTransferTypedDict,
        components_transfer.TransferTypedDict,
    ],
)
r"""The request completed successfully."""


CreateTransferResponseBody = TypeAliasType(
    "CreateTransferResponseBody",
    Union[components_asynctransfer.AsyncTransfer, components_transfer.Transfer],
)
r"""The request completed successfully."""


CreateTransferResponseTypedDict = TypeAliasType(
    "CreateTransferResponseTypedDict",
    Union[
        components_asynctransfer.AsyncTransferTypedDict,
        components_transfer.TransferTypedDict,
        CreateTransferResponseBodyTypedDict,
    ],
)


CreateTransferResponse = TypeAliasType(
    "CreateTransferResponse",
    Union[
        components_asynctransfer.AsyncTransfer,
        components_transfer.Transfer,
        CreateTransferResponseBody,
    ],
)
