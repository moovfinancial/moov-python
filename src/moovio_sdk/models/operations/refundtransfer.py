"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from moovio_sdk.models.components import (
    cardacquiringrefund as components_cardacquiringrefund,
    createrefund as components_createrefund,
    createrefundresponse as components_createrefundresponse,
    schemebasicauth as components_schemebasicauth,
    transferwaitfor as components_transferwaitfor,
    versions as components_versions,
)
from moovio_sdk.types import BaseModel
from moovio_sdk.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class RefundTransferSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[components_schemebasicauth.SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class RefundTransferSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[components_schemebasicauth.SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class RefundTransferRequestTypedDict(TypedDict):
    x_idempotency_key: str
    r"""Prevents duplicate refunds from being created."""
    account_id: str
    r"""The merchant's Moov account ID."""
    transfer_id: str
    r"""Identifier for the transfer."""
    x_moov_version: NotRequired[components_versions.Versions]
    r"""Specify an API version."""
    x_wait_for: NotRequired[components_transferwaitfor.TransferWaitFor]
    r"""Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
    asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
    """
    create_refund: NotRequired[components_createrefund.CreateRefundTypedDict]


class RefundTransferRequest(BaseModel):
    x_idempotency_key: Annotated[
        str,
        pydantic.Field(alias="x-idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""Prevents duplicate refunds from being created."""

    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The merchant's Moov account ID."""

    transfer_id: Annotated[
        str,
        pydantic.Field(alias="transferID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Identifier for the transfer."""

    x_moov_version: Annotated[
        Optional[components_versions.Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    x_wait_for: Annotated[
        Optional[components_transferwaitfor.TransferWaitFor],
        pydantic.Field(alias="x-wait-for"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an
    asynchronous response indicating the transfer was created (this is the default response if the header is omitted).
    """

    create_refund: Annotated[
        Optional[components_createrefund.CreateRefund],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


RefundTransferResponseTypedDict = TypeAliasType(
    "RefundTransferResponseTypedDict",
    Union[
        components_cardacquiringrefund.CardAcquiringRefundTypedDict,
        components_createrefundresponse.CreateRefundResponseTypedDict,
    ],
)


RefundTransferResponse = TypeAliasType(
    "RefundTransferResponse",
    Union[
        components_cardacquiringrefund.CardAcquiringRefund,
        components_createrefundresponse.CreateRefundResponse,
    ],
)
