"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from moovio_sdk.models.components import (
    issuingauthorizationstatus as components_issuingauthorizationstatus,
    schemebasicauth as components_schemebasicauth,
    versions as components_versions,
)
from moovio_sdk.types import BaseModel
from moovio_sdk.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListIssuedCardAuthorizationsSecurityTypedDict(TypedDict):
    basic_auth: NotRequired[components_schemebasicauth.SchemeBasicAuthTypedDict]
    o_auth2_auth: NotRequired[str]


class ListIssuedCardAuthorizationsSecurity(BaseModel):
    basic_auth: Annotated[
        Optional[components_schemebasicauth.SchemeBasicAuth],
        FieldMetadata(
            security=SecurityMetadata(scheme=True, scheme_type="http", sub_type="basic")
        ),
    ] = None

    o_auth2_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="oauth2", field_name="Authorization"
            )
        ),
    ] = None


class ListIssuedCardAuthorizationsRequestTypedDict(TypedDict):
    account_id: str
    r"""The Moov business account for which cards have been issued."""
    x_moov_version: NotRequired[components_versions.Versions]
    r"""Specify an API version."""
    skip: NotRequired[int]
    count: NotRequired[int]
    issued_card_id: NotRequired[str]
    r"""Optional ID of the issued card to filter results."""
    start_date_time: NotRequired[datetime]
    r"""Optional date-time which inclusively filters all authorizations created after this date-time."""
    end_date_time: NotRequired[datetime]
    r"""Optional date-time which exclusively filters all authorizations created before this date-time."""
    statuses: NotRequired[
        List[components_issuingauthorizationstatus.IssuingAuthorizationStatus]
    ]
    r"""Optional, comma-separated statuses of the authorization to filter results."""


class ListIssuedCardAuthorizationsRequest(BaseModel):
    account_id: Annotated[
        str,
        pydantic.Field(alias="accountID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The Moov business account for which cards have been issued."""

    x_moov_version: Annotated[
        Optional[components_versions.Versions],
        pydantic.Field(alias="x-moov-version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Specify an API version."""

    skip: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None

    count: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None

    issued_card_id: Annotated[
        Optional[str],
        pydantic.Field(alias="issuedCardID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional ID of the issued card to filter results."""

    start_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="startDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which inclusively filters all authorizations created after this date-time."""

    end_date_time: Annotated[
        Optional[datetime],
        pydantic.Field(alias="endDateTime"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional date-time which exclusively filters all authorizations created before this date-time."""

    statuses: Annotated[
        Optional[
            List[components_issuingauthorizationstatus.IssuingAuthorizationStatus]
        ],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Optional, comma-separated statuses of the authorization to filter results."""
